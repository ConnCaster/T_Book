/*
Напишите программу-«телефонную книжку», состоящую из 2-х компонентов:

Компонент-книжка.
Записи (имя и телефон) должны хранится в каком-либо контейнере из STL.
Программа должна поддерживать следующие операции:

• Просмотр текущей записи.
• Переход к следующей записи.
• Переход к предыдущей записи.
• Вставка записи перед/после просматриваемой.
• Замена просматриваемой записи.
• Вставка записи в конец базы данных.
• Переход вперед/назад через n записей.

Необходимо учесть, что клиентскому коду может быть необходимо иметь ссылки на разные записи в книжке одновременно.
Помните, что после вставки и удаления элемента итераторы могут стать недействительными.
Телефон представляется в виде последовательности цифр без разделителей.
2. Пользовательский интерфейс, принимающий команды со стандартного ввода по одной на строке и выводящий результаты на стандартный вывод. Должны поддерживаться следующие команды:
+ • **add number "name"** Добавление записи в конец. Кавычки не являются частью имени.
Требуется учесть, что имя может содержать кавычки и обратную черту, (предваренные обратной косой чертой, как в литералах C++ [Мар, табл. 3.2]), но не может содержать новую строку (например, "Name\"Nick\"Surname").
• **store mark-name new-mark-name**
Сохраняет текущую позицию закладки с именем mark-name как новую закладку с именем new-mark-name.
Имя содержит только символы английского алфавита, цифры и знак «минус».
После запуска программы доступна 1 закладка с именем **current**.
• **insert before mark-name number "name"**
Добавление записи перед закладкой **mark-name**.
• **insert after mark-name number "name"**
Добавление записи после закладки **mark-name**.
• **delete mark-name**
Удаление закладки с именем mark-name.
• **delete t_book instance by mark-name**
Удаление записи, на которую указывает закладка mark-name.
После удаления закладка указывает на следующий элемент.
• **show mark-name**
Показ записи, на которую указывает закладка mark-name. Если записей нет (книжка пустая), выводится ****.
Вывод должен быть выполнен без служебных последовательностей, в частности, строка из примера команды **add** должна быть выведена как Name **"Nick"Surname**.
• **move mark-name steps**
Перемещение закладки mark-name на steps элементов. Если steps положительно, то закладка перемещается вперед, иначе — назад. Также в качестве steps могут быть использованы ключевые слова first и last, означающие первую и последнюю запись соответственно. Если параметр steps не число и не зарезервированное ключевое слово, в стандартный вывод выводится сообщение . Работа пользовательского интерфейса заканчивается при наступлении EOF или ошибки ввода-вывода. В случае ошибки, код возврата должен быть равен 2.
В случае получения неправильной команды необходимо вывести в стандартный вывод строку **** и продолжить работу. Если переданное имя закладки не существует в стандартный вывод выводится строка ****.
 */

#include "t_book.hpp"

// TODO: библиотека для тестирования - Catch
// TODO: система контроля версий - Git

int main() {
//    T_Book tb{};
//    tb.append("qwe", "asd");
//    tb.append("qwe", "89991234567");
/*
    std::vector<int> vec{1,2,3,4,5};
    auto it = vec.begin();
    auto it_last = vec.end() - 1;
    it += 2;
    vec.erase(vec.begin()+3);
    std::cout << *it << " " << *it_last;
*/
    return 0;
}